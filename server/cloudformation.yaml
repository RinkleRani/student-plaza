AWSTemplateFormatVersion: 2010-09-09
Metadata:
  License: Apache 2.0
Description: 'CloudFormation template for Student Plaza project stack'
Parameters:
  RdsUserName:
    Type: String
    Description: Username for the Rds User TableName
  RdsPassword:
    Type: String
    Description: Password for the Rds User TableName
Resources:
  PostDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: PostDynamoDBTable
      AttributeDefinitions:
        - AttributeName: postId
          AttributeType: S
      KeySchema:
        - AttributeName: postId
          KeyType: HASH
      ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
      StreamSpecification:
          StreamViewType: 'NEW_IMAGE'
  EsIndexerFunction:
      Type: 'AWS::Lambda::Function'
      Properties:
        Handler: 'index.handler'
        Runtime: nodejs12.x
        Role: !GetAtt LambdaRole.Arn
        Environment:
          Variables:
            ES_ENDPOINT: !GetAtt ElasticsearchDomain.DomainEndpoint
            ES_REGION: !Ref AWS::Region
        Code:
          ZipFile: |
            var AWS = require('aws-sdk');
            var path = require('path');
            var esDomain = {
                endpoint: process.env.ES_ENDPOINT,
                region: process.env.ES_REGION,
                index: 'test',
                doctype: 'post'
            };
            var endpoint =  new AWS.Endpoint(esDomain.endpoint);
            var creds = new AWS.EnvironmentCredentials('AWS');
            exports.handler = (event, context, callback) => {
              event.Records.forEach(record => {
                postDocumentToES(record.dynamodb.NewImage, context);
              });
            }
            function postDocumentToES(doc, context) {
                var req = new AWS.HttpRequest(endpoint);
                req.method = 'POST';
                req.path = path.join('/', esDomain.index, esDomain.doctype);
                req.region = esDomain.region;
                req.body = JSON.stringify(doc);
                req.headers['presigned-expires'] = false;
                req.headers['Host'] = endpoint.host;
                // Sign the request (Sigv4)
                var signer = new AWS.Signers.V4(req, 'es');
                signer.addAuthorization(creds, new Date());
                // Post document to ES
                var send = new AWS.NodeHttpClient();
                send.handleRequest(req, null, function(httpResp) {
                    var body = '';
                    httpResp.on('data', chunk => body += chunk);
                    httpResp.on('end', chunk => context.succeed());
                }, function(err) {
                    console.log('Error: ' + err);
                    context.fail();
                });
            }
  TableStreamLambdaMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 2
      EventSourceArn: !GetAtt PostDynamoDBTable.StreamArn
      FunctionName: !GetAtt EsIndexerFunction.Arn
      StartingPosition: 'LATEST'
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'LambdaRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: 'Allow'
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: 'arn:aws:logs:*:*:*'
            - Effect: 'Allow'
              Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
              Resource: !GetAtt PostDynamoDBTable.StreamArn
  ElasticsearchDomain:
    Type: 'AWS::Elasticsearch::Domain'
    Properties:
      DomainName: 'es-post'
      ElasticsearchClusterConfig:
        InstanceType: 't2.micro.elasticsearch'
        InstanceCount: 1
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: 'standard'
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: !GetAtt LambdaRole.Arn
            Action: 'es:*'
            Resource: '*'
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'
  StudentPlazaEKSClusterIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: 'StudentPlazaEKSClusterIAMRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  StudentPlazaEKSClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  StudentPlazaInternetGateway:
    Type: AWS::EC2::InternetGateway
  StudentPlazaVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref StudentPlazaInternetGateway
      VpcId: !Ref StudentPlazaEKSClusterVPC
  StudentPlazaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StudentPlazaEKSClusterVPC
  StudentPlazaPublicRoute:
    DependsOn: StudentPlazaVPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref StudentPlazaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref StudentPlazaInternetGateway
  StudentPlazaPublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      MapPublicIpOnLaunch: true
      CidrBlock: 192.168.0.0/18
      VpcId:
        Ref: StudentPlazaEKSClusterVPC
  StudentPlazaPublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2d
      MapPublicIpOnLaunch: true
      CidrBlock: 192.168.64.0/18
      VpcId:
        Ref: StudentPlazaEKSClusterVPC
  StudentPlazaPublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StudentPlazaPublicSubnet01
      RouteTableId: !Ref StudentPlazaPublicRouteTable
  StudentPlazaPublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StudentPlazaPublicSubnet02
      RouteTableId: !Ref StudentPlazaPublicRouteTable
  StudentPlazaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref StudentPlazaEKSClusterVPC
  StudentPlazaEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: "StudentPlazaEKSCluster"
      RoleArn:
        "Fn::GetAtt": ["StudentPlazaEKSClusterIAMRole", "Arn"]
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref StudentPlazaSecurityGroup
        SubnetIds:
          - !Ref StudentPlazaPublicSubnet01
          - !Ref StudentPlazaPublicSubnet02
    DependsOn: [StudentPlazaEKSClusterIAMRole, StudentPlazaPublicSubnet01,StudentPlazaPublicSubnet02, StudentPlazaSecurityGroup]
  StudentPlazaNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName: 'StudentPlazaNodeInstanceRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Path: /
  StudentPlazaNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: StudentPlazaEKSCluster
      NodeRole: 
        "Fn::GetAtt": ["StudentPlazaNodeInstanceRole", "Arn"]
      AmiType: AL2_x86_64
      InstanceTypes: 
        - t2.micro
      NodegroupName: StudentPlazaNodeGroup
      RemoteAccess:
        Ec2SshKey: student-plaza-node-group-key
      ScalingConfig:
        MinSize: 2
        DesiredSize: 3
        MaxSize: 4
      Subnets:
        - !Ref StudentPlazaPublicSubnet01
        - !Ref StudentPlazaPublicSubnet02
    DependsOn: [StudentPlazaEKSCluster, StudentPlazaNodeInstanceRole]
  StudentPlazaUserDb:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: StudentPlazaUserDb
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.small
      PubliclyAccessible: True
      Engine: MySQL
      MasterUsername: 
        Ref: RdsUserName
      MasterUserPassword: 
        Ref: RdsPassword
    DeletionPolicy: Snapshot